{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["marked","require","initialState","App","state","markdown","updateMarkdown","this","setState","className","class","target","rel","href","id","alt","Row","Col","FormGroup","controlId","FormLabel","FormControl","as","placeholder","value","onChange","e","dangerouslySetInnerHTML","__html","breaks","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2UAeIA,EAASC,EAAQ,IAWfC,EAAY,k5CAkHHC,E,4MA3DbC,MAAQ,CACNC,SAAUH,G,EAGZI,eAAiB,SAAUD,GAGzBE,KAAKC,SAAS,CAAEH,c,uDAGR,IAAD,OAGDA,EAAaE,KAAKH,MAAlBC,SACN,OAEE,yBAAKI,UAAU,uBACb,yBAAKC,MAAM,qBAAX,kCAA8D,uBAAGA,MAAM,wBAAwBC,OAAO,SAASC,IAAI,sBAAsBC,KAAK,+BAA+BC,GAAG,WAAWC,IAAI,0BAAjI,kBAA9D,KACJ,6BACI,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KAGE,kBAACC,EAAA,EAAD,CAAWC,UAAU,uBAEnB,kBAACC,EAAA,EAAD,CAAWX,UAAU,SAAQ,+CAM7B,kBAACY,EAAA,EAAD,CAAaC,GAAG,WAAWR,GAAG,SAASL,UAAU,wBAAwBc,YAAY,sBAAsBC,MAAOnB,EAAUoB,SAAU,SAACC,GAAD,OAAO,EAAKpB,eAAeoB,EAAEf,OAAOa,YAK9K,kBAACP,EAAA,EAAD,KACE,kBAACG,EAAA,EAAD,CAAWX,UAAU,SAAQ,0CAQ7B,yBAAKkB,wBAAyB,CAAEC,OAAQ5B,EAAOK,EAAU,CAAEwB,QAAQ,KAAWf,GAAG,UAAUL,UAAU,4BAIzG,yBAAKC,MAAM,aAEb,yBAAKA,MAAM,UAAX,OAAwB,uBAAGA,MAAM,YAAYC,OAAO,SAASC,IAAI,sBAAsBC,KAAK,gCAApE,iB,GArDZiB,aCnEEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7f0e5ca8.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n// These are the dependancies we will use for the project:\n// Be aware: the links changed in the couple last years (https://backbencher.dev/blog/react-bootstrap-controllabel-warning), check documentation if they break again\n//Formgroup class basically groups together forms (hence the name)\nimport FormGroup from \"react-bootstrap/FormGroup\";\n//Formlabel is the label for the textarea\nimport FormLabel from \"react-bootstrap/FormLabel\";\n//Formcontrol is the text-area itself\nimport FormControl from \"react-bootstrap/FormControl\";\n//Found interesting options in documenatation and decided to try out rows and columns in the library instead of other bootstrap options\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\n\n//The next line brings in the marked-library\nlet marked = require(\"marked\");\n\n//I decided to go for the old-fashioned React Class Component instead of a Function Component\n// so I had to delete this start: \"function App() {\"\n\n//\"It's very easy to make some words **bold** and other words *italic* with Markdown. You can even [link to Google!](http://google.com)\";\n\n// I was stuck here for a bit because I tried to make a multi-line/unterminated -string, but learned to use \"template literals\" (backticks: `)\n\n// a header (H1 size), a sub header (H2 size), a link, inline code, a code block, a list item, a blockquote, an image, and bolded text\n\nconst initialState = `First of all: [great documentation](https://www.markdownguide.org/basic-syntax/) to take Markdown syntax to the next level\n\nThen the requirements to pass the FCC-tests:\n\n# Welcome to my React Markdown Previewer!\n\n## This is a sub-heading...\n### And here's some other cool stuff:\n  \nHeres some code, \\`<div></div>\\`, between 2 backticks.\n\n\\`\\`\\`\n// this is multi-line code:\n\nfunction anotherExample(firstLine, lastLine) {\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\n    return multiLineCode;\n  }\n}\n\\`\\`\\`\n  \nOr _italic_.\nOr... wait for it... **_both!_**\nAnd feel free to go crazy ~~crossing stuff out~~.\nUnderline is not available in markdown,\nBold is shown in the next line:\n\nThere's also [Visit my GitHub](https://github.com/Gerard-B/) **this is actually a link to my GitHub :D**, and\n> Block Quotes!\n\nAnd if you want to get really crazy, even tables:\n\nSomehow tables don't work unfortunately :( :\n| Syntax      | Description |\n| ----------- | ----------- |\n| Header      | Title       |\n| Paragraph   | Text        |\n\n- And of course there are lists.\n  - Some are bulleted.\n     - With different indentation levels.\n        - That look like this.\n\n\n1. And there are numbererd lists too.\n1. Use just 1s if you want! \n1. But the list goes on...\n- Even if you use dashes or asterisks.\n* And last but not least, let's not forget embedded images:\n\n![Camera](/cameraUnsplash.jpeg)`;\n\n\nclass App extends Component {\n\n  state = {\n    markdown: initialState\n  }\n\n  updateMarkdown = function (markdown) {\n    //thanks to ES6 we dont have to write \"markdown:value\" within this.setState().\n    //no bind required due to ES6 function (although I didn't use the cool-arrow function. Possibly no super required either due to assigning this.state to a variable in a few lines)\n    this.setState({ markdown });\n  }\n\n  render() {\n    //by creating this variable, we don't have to write this.state.markdown at the value in FormControl\n    //so this let {markdown} says: \"let this value hold whatever this.state.markdown is\"\n    let { markdown } = this.state;\n    return (\n      // bootstrap calls container is used, consider to use \"container\" later\n      <div className=\"App container-fluid\">\n        <div class=\"h5 text-dark mt-2\"> This website is a project for <a class=\"badge badge-secondary\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.freecodecamp.com\" id=\"link-fcc\" alt=\"Check out FreeCodeCamp\"> FreeCodeCamp </a> </div>\n    <br></br>\n        <Row>\n          <Col>\n\n            {/* See information of these Form-items above at the import part */}\n            <FormGroup controlId=\"FormControlTextArea\">\n\n              <FormLabel className=\"title\"><h2>Markdown Input</h2></FormLabel>\n\n              {/* The logic here: we want to change the input of the textbox to markdown, VIA STATE. The \"e\" in the next time is \"event\" */}\n              {/* OnChange passes in an event callback. It says: \"when this runs, call this other function (our updated markdown). */}\n              {/* And within that we want to pass in: \"event.target.value\", which is the content which is inside our text area.   */}\n              {/* componentClass=\"textarea\" doesn't work here because it is just one line, therefor I used \"as=\"textarea\"\" */}\n              <FormControl as=\"textarea\" id=\"editor\" className=\"border border-primary\" placeholder=\"Enter Markdown here\" value={markdown} onChange={(e) => this.updateMarkdown(e.target.value)}></FormControl>\n\n            </FormGroup>\n          </Col>\n\n          <Col>\n            <FormLabel className=\"title\"><h2>Previewer</h2></FormLabel>\n            {/* <output id=\"preview\">this should later show the state of the app</output> */}\n            {/* The way you convert Markdown into HTML is by passing it into marked (which then utilizes the library) */}\n            {/* React documentation: \"dangerouslySetInnerHTML is React’s replacement for using innerHTML in the browser DOM. In general, setting HTML from code is risky\n       because it’s easy to inadvertently expose your users to a cross-site scripting (XSS) attack. So, you can set HTML directly from React,\n       but you have to type out dangerouslySetInnerHTML and pass an object with a __html key, to remind yourself that it’s dangerous.\"\" */}\n            {/* For the optional bonus test (interpret carriage returns and render them as <br>): normally you use marked(text to apply the markdown on),\n       but to also convert breaks you have to add \",{breaks:true}\" to adapt the setting. See documentation: https://marked.js.org/#/USING_ADVANCED.md#options*/}\n            <div dangerouslySetInnerHTML={{ __html: marked(markdown, { breaks: true }) }} id=\"preview\" className=\"border border-primary\"></div>\n          </Col>\n          \n        </Row>\n        <div class=\"text-dark\">\n         {/* Haven't heard of \"tab-nabbing\" risk, but now will add \"rel=\"noopener noreferrer\"\" to links (as recommended here: https://mathiasbynens.github.io/rel-noopener/) */}\n      <div class=\"footer\"> by <a class=\"text-dark\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/Gerard-B/\">Gerard</a></div>\n    </div>\n         \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}